module FINAL_PROJECT ( 
	//////////// CLOCK //////////
	//input 		          		CLOCK2_50,
	//input 		          		CLOCK3_50,
	//input 		          		CLOCK4_50,
	input 		          		CLOCK_50,
	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	//output		     [6:0]		HEX4,
	//output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);
reg [191:0]BOARD;
assign BOARD = 192'b010111010111010111010111111010111010111010111010010111010111010111010111111000111000111000111000000111000111000111000111111001111001111001111001001111001111001111001111111001111001111001111001;


wire [6:0]seg7_neg_sign;
wire [6:0]seg7_dig0;
wire [6:0]seg7_dig1;
wire [6:0]seg7_dig2;

assign HEX0 = seg7_dig0;
assign HEX1 = seg7_dig1;
assign HEX2 = seg7_dig2; // constant 0
assign HEX3 = seg7_neg_sign;
three_decimal_vals_w_neg display(
status,
seg7_neg_sign,
seg7_dig0,
seg7_dig1,
seg7_dig2
);

wire clk;
assign clk = KEY[0];
wire rst;
assign rst = KEY[3];

reg [2:0]S;
reg [2:0]NS;
reg [3:0]Disired_X;
reg [3:0]Disired_Y;
reg en;

reg [2:0] status;

GameState g1 (clk,rst,Disired_X,Disired_Y,en,BOARD,status);

parameter START = 3'b000,
    SET_X = 3'b001,
    SET_Y = 3'b010,
    GETRESULT = 3'b011,
    DISPLAY_RESULT = 3'b111;
// S update block
always @(posedge clk or negedge rst)
begin
	if (rst == 1'b0)
		S <= START;
	else
		S <= NS;
end
// NS update block
always @(*) begin
    case (S)
        START : NS = SET_X;
        SET_X : NS = SET_Y;
        SET_Y : NS = GETRESULT;
        GETRESULT : NS = DISPLAY_RESULT;
        DISPLAY_RESULT : START; 
    endcase
end
// Control Bits one
always @(posedge clk or negedge rst) begin
	if (rst == 1'b0)
	begin
		/* rst control */
        Disired_X <= 0;
        Disired_Y <= 0;
        en <= 0;
	end
    else begin
        case (S)
            START : begin
                Disired_X <= 0;
                Disired_Y <= 0;
            end
            SET_X : begin
                Disired_X <= SW[3:0];
            end
            SET_Y : begin
                Disired_Y <= SW[3:0];
            end
            GETRESULT : begin
                en <= 1;
            end
            DISPLAY_RESULT : begin
                en<= 0;
            end
        endcase

    end
        end

endmodule